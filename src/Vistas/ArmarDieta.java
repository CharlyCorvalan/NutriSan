/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import AccesoADatos.ComidaData;
import AccesoADatos.DietaComidaData;
import AccesoADatos.DietaData;
import AccesoADatos.PacienteData;
import AccesoADatos.PrepararComidaData;
import Entidades.Comida;
import Entidades.Dieta;
import Entidades.Ingredientes;
import Entidades.Paciente;
import java.awt.Color;
import java.awt.Dimension;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author charl
 */
public class ArmarDieta extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel();
    private DefaultTableModel modelo2 = new DefaultTableModel();
    private JComponent Barra = ((javax.swing.plaf.basic.BasicInternalFrameUI) getUI()).getNorthPane();
    private Dimension DimensionBarra = null;
    private boolean crear, modificar, ver = false;

    public ArmarDieta() {
        initComponents();
        ((javax.swing.plaf.basic.BasicInternalFrameUI) this.getUI()).setNorthPane(null);
        PanelFechaFinal.setVisible(false);
        PanelCantCalorias.setVisible(false);
        CargarCabeceraComiAgregadas();
        CargarCabeceraComidas();
        CargarComboBox();
        LabelAvisoModificar.setVisible(false);
        LabelAvisoCrearDieta.setVisible(false);
        LabelAvisoEmpezar.setVisible(false);
        LabelAvisoPrevisualizarPlanDieta.setVisible(false);
        CargarComboPacientes();
        TextoObjetivoCaloriasEditable.setEditable(false);
        TextoCaloriasSumadas.setEditable(false);
        TextoFechaFinalAutomatica.setEditable(false);
        TextoPesoFinal.setEditable(false);
        TextoPesoInicial.setEditable(false);
        CalendarioFechaInicial.setEnabled(false);
        TextoNomDieta.setEditable(false);
        TextoCaloriasSumadas.setText("0");
        ComboListarCalorias.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TextoNomDieta = new javax.swing.JTextField();
        PanelPesoInicialLabel = new javax.swing.JPanel();
        LabelIngPesoInicial = new javax.swing.JLabel();
        PanelIngPesoFinal = new javax.swing.JPanel();
        LabelIngPesoFinal = new javax.swing.JLabel();
        PanelFechaInicial = new javax.swing.JPanel();
        LabelFechaInicial = new javax.swing.JLabel();
        CalendarioFechaInicial = new com.toedter.calendar.JDateChooser();
        TextoPesoInicial = new javax.swing.JTextField();
        TextoPesoFinal = new javax.swing.JTextField();
        PanelFechaFinal = new javax.swing.JPanel();
        LabelFechaFinal = new javax.swing.JLabel();
        TextoFechaFinalAutomatica = new javax.swing.JTextField();
        PanelCantCalorias = new javax.swing.JPanel();
        LabelCantCalorias = new javax.swing.JLabel();
        TextoCaloriasSumadas = new javax.swing.JTextField();
        LabelObjKcal = new javax.swing.JLabel();
        TextoObjetivoCaloriasEditable = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaComidasAgregadas = new javax.swing.JTable();
        PanelListarDietas = new javax.swing.JPanel();
        LabelListarDietas = new javax.swing.JLabel();
        ComboListaDietas = new javax.swing.JComboBox<>();
        ComboListarCalorias = new javax.swing.JComboBox<>();
        PanelSelecCalorias = new javax.swing.JPanel();
        LabelSeleccionCal = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaComidasParaAgregar = new javax.swing.JTable();
        LabelBotonModificarDieta = new javax.swing.JLabel();
        LabelCrearDieta = new javax.swing.JLabel();
        LabelBotonCrearDietaComida = new javax.swing.JLabel();
        LabelAvisoModificar = new javax.swing.JLabel();
        LabelAvisoCrearDieta = new javax.swing.JLabel();
        LabelAvisoEmpezar = new javax.swing.JLabel();
        ComboPacientes = new javax.swing.JComboBox<>();
        LabelBotonPreVisualizarDieta = new javax.swing.JLabel();
        LabelAvisoPrevisualizarPlanDieta = new javax.swing.JLabel();
        Fondo = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setPreferredSize(new java.awt.Dimension(750, 565));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        TextoNomDieta.setBackground(new java.awt.Color(204, 204, 255));
        TextoNomDieta.setForeground(new java.awt.Color(102, 102, 102));
        TextoNomDieta.setText("Ingrese un nombre de dieta..");
        TextoNomDieta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TextoNomDietaMouseClicked(evt);
            }
        });
        getContentPane().add(TextoNomDieta, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 190, -1));

        PanelPesoInicialLabel.setBackground(new java.awt.Color(204, 204, 255));

        LabelIngPesoInicial.setText("  Ingrese su peso inicial");

        javax.swing.GroupLayout PanelPesoInicialLabelLayout = new javax.swing.GroupLayout(PanelPesoInicialLabel);
        PanelPesoInicialLabel.setLayout(PanelPesoInicialLabelLayout);
        PanelPesoInicialLabelLayout.setHorizontalGroup(
            PanelPesoInicialLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPesoInicialLabelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelIngPesoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        PanelPesoInicialLabelLayout.setVerticalGroup(
            PanelPesoInicialLabelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPesoInicialLabelLayout.createSequentialGroup()
                .addComponent(LabelIngPesoInicial)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        getContentPane().add(PanelPesoInicialLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 200, 20));

        PanelIngPesoFinal.setBackground(new java.awt.Color(204, 204, 255));

        LabelIngPesoFinal.setText("  Ingrese su peso final");

        javax.swing.GroupLayout PanelIngPesoFinalLayout = new javax.swing.GroupLayout(PanelIngPesoFinal);
        PanelIngPesoFinal.setLayout(PanelIngPesoFinalLayout);
        PanelIngPesoFinalLayout.setHorizontalGroup(
            PanelIngPesoFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelIngPesoFinalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelIngPesoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        PanelIngPesoFinalLayout.setVerticalGroup(
            PanelIngPesoFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelIngPesoFinalLayout.createSequentialGroup()
                .addComponent(LabelIngPesoFinal)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        getContentPane().add(PanelIngPesoFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 200, 20));

        PanelFechaInicial.setBackground(new java.awt.Color(204, 204, 255));
        PanelFechaInicial.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LabelFechaInicial.setText("Fecha inicial");
        PanelFechaInicial.add(LabelFechaInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, 70, -1));

        CalendarioFechaInicial.setBackground(new java.awt.Color(204, 204, 255));
        CalendarioFechaInicial.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                CalendarioFechaInicialAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        CalendarioFechaInicial.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CalendarioFechaInicialMouseClicked(evt);
            }
        });
        CalendarioFechaInicial.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                CalendarioFechaInicialPropertyChange(evt);
            }
        });
        PanelFechaInicial.add(CalendarioFechaInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 132, 30));

        getContentPane().add(PanelFechaInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 220, 30));

        TextoPesoInicial.setBackground(new java.awt.Color(204, 204, 255));
        getContentPane().add(TextoPesoInicial, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 70, -1));

        TextoPesoFinal.setBackground(new java.awt.Color(204, 204, 255));
        getContentPane().add(TextoPesoFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 70, -1));

        PanelFechaFinal.setBackground(new java.awt.Color(204, 204, 255));

        LabelFechaFinal.setText("Fecha Final");

        TextoFechaFinalAutomatica.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout PanelFechaFinalLayout = new javax.swing.GroupLayout(PanelFechaFinal);
        PanelFechaFinal.setLayout(PanelFechaFinalLayout);
        PanelFechaFinalLayout.setHorizontalGroup(
            PanelFechaFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelFechaFinalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelFechaFinal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TextoFechaFinalAutomatica, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelFechaFinalLayout.setVerticalGroup(
            PanelFechaFinalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelFechaFinalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelFechaFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(35, 35, 35))
            .addGroup(PanelFechaFinalLayout.createSequentialGroup()
                .addComponent(TextoFechaFinalAutomatica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(PanelFechaFinal, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 170, 30));

        PanelCantCalorias.setBackground(new java.awt.Color(204, 204, 255));

        LabelCantCalorias.setBackground(new java.awt.Color(204, 204, 255));
        LabelCantCalorias.setText("Calorias:");

        TextoCaloriasSumadas.setBackground(new java.awt.Color(204, 204, 255));

        LabelObjKcal.setBackground(new java.awt.Color(204, 204, 255));
        LabelObjKcal.setText("Objetivo Semanal en kcal:");

        TextoObjetivoCaloriasEditable.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout PanelCantCaloriasLayout = new javax.swing.GroupLayout(PanelCantCalorias);
        PanelCantCalorias.setLayout(PanelCantCaloriasLayout);
        PanelCantCaloriasLayout.setHorizontalGroup(
            PanelCantCaloriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelCantCaloriasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelCantCalorias, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TextoCaloriasSumadas, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LabelObjKcal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextoObjetivoCaloriasEditable, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelCantCaloriasLayout.setVerticalGroup(
            PanelCantCaloriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelCantCaloriasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelCantCaloriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelCantCalorias)
                    .addComponent(TextoCaloriasSumadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelObjKcal)
                    .addComponent(TextoObjetivoCaloriasEditable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(PanelCantCalorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 390, 30));

        TablaComidasAgregadas.setBackground(new java.awt.Color(204, 204, 255));
        TablaComidasAgregadas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaComidasAgregadas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaComidasAgregadasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaComidasAgregadas);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 390, 220));

        PanelListarDietas.setBackground(new java.awt.Color(204, 204, 255));

        LabelListarDietas.setBackground(new java.awt.Color(204, 204, 255));
        LabelListarDietas.setText("Lista de Dietas:");

        javax.swing.GroupLayout PanelListarDietasLayout = new javax.swing.GroupLayout(PanelListarDietas);
        PanelListarDietas.setLayout(PanelListarDietasLayout);
        PanelListarDietasLayout.setHorizontalGroup(
            PanelListarDietasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelListarDietasLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(LabelListarDietas, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ComboListaDietas, 0, 138, Short.MAX_VALUE)
                .addContainerGap())
        );
        PanelListarDietasLayout.setVerticalGroup(
            PanelListarDietasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelListarDietasLayout.createSequentialGroup()
                .addGroup(PanelListarDietasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelListarDietas)
                    .addComponent(ComboListaDietas, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(PanelListarDietas, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, 260, 20));

        ComboListarCalorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboListarCaloriasActionPerformed(evt);
            }
        });
        getContentPane().add(ComboListarCalorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 50, 180, -1));

        PanelSelecCalorias.setBackground(new java.awt.Color(204, 204, 255));

        LabelSeleccionCal.setBackground(new java.awt.Color(204, 204, 255));
        LabelSeleccionCal.setText(" Seleccione las Kcal.");

        javax.swing.GroupLayout PanelSelecCaloriasLayout = new javax.swing.GroupLayout(PanelSelecCalorias);
        PanelSelecCalorias.setLayout(PanelSelecCaloriasLayout);
        PanelSelecCaloriasLayout.setHorizontalGroup(
            PanelSelecCaloriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LabelSeleccionCal, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
        );
        PanelSelecCaloriasLayout.setVerticalGroup(
            PanelSelecCaloriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelSelecCaloriasLayout.createSequentialGroup()
                .addGap(0, 4, Short.MAX_VALUE)
                .addComponent(LabelSeleccionCal))
        );

        getContentPane().add(PanelSelecCalorias, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 20, 140, 20));

        jScrollPane2.setBackground(new java.awt.Color(204, 204, 255));

        TablaComidasParaAgregar.setBackground(new java.awt.Color(204, 204, 255));
        TablaComidasParaAgregar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaComidasParaAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaComidasParaAgregarMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablaComidasParaAgregar);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(443, 90, 300, 350));

        LabelBotonModificarDieta.setBackground(new java.awt.Color(255, 0, 0));
        LabelBotonModificarDieta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/modificaTransparenteFotos.png"))); // NOI18N
        LabelBotonModificarDieta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LabelBotonModificarDieta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LabelBotonModificarDietaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LabelBotonModificarDietaMouseExited(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LabelBotonModificarDietaMouseClicked(evt);
            }
        });
        getContentPane().add(LabelBotonModificarDieta, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 0, -1, -1));

        LabelCrearDieta.setBackground(new java.awt.Color(255, 0, 0));
        LabelCrearDieta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/CrearDietaTransparenteFotos.png"))); // NOI18N
        LabelCrearDieta.setText("   Crear Dieta");
        LabelCrearDieta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LabelCrearDieta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LabelCrearDietaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LabelCrearDietaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LabelCrearDietaMouseExited(evt);
            }
        });
        getContentPane().add(LabelCrearDieta, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, 40, 40));

        LabelBotonCrearDietaComida.setBackground(new java.awt.Color(204, 204, 255));
        LabelBotonCrearDietaComida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/CrearEmpezarTransparenteFotos.png"))); // NOI18N
        LabelBotonCrearDietaComida.setText("     Empezar!");
        LabelBotonCrearDietaComida.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LabelBotonCrearDietaComida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LabelBotonCrearDietaComidaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LabelBotonCrearDietaComidaMouseExited(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LabelBotonCrearDietaComidaMouseClicked(evt);
            }
        });
        getContentPane().add(LabelBotonCrearDietaComida, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 450, 40, 40));

        LabelAvisoModificar.setBackground(new java.awt.Color(204, 204, 255));
        LabelAvisoModificar.setForeground(new java.awt.Color(255, 255, 255));
        LabelAvisoModificar.setText(" Modificar");
        getContentPane().add(LabelAvisoModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 10, 60, 20));

        LabelAvisoCrearDieta.setBackground(new java.awt.Color(204, 204, 255));
        LabelAvisoCrearDieta.setForeground(new java.awt.Color(255, 255, 255));
        LabelAvisoCrearDieta.setText(" Crear");
        getContentPane().add(LabelAvisoCrearDieta, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 40, 20));

        LabelAvisoEmpezar.setForeground(new java.awt.Color(255, 255, 255));
        LabelAvisoEmpezar.setText("Empezar!");
        getContentPane().add(LabelAvisoEmpezar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 460, -1, 20));

        ComboPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboPacientesActionPerformed(evt);
            }
        });
        getContentPane().add(ComboPacientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 200, 20));

        LabelBotonPreVisualizarDieta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/visualizarDietaChiquita.png"))); // NOI18N
        LabelBotonPreVisualizarDieta.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        LabelBotonPreVisualizarDieta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LabelBotonPreVisualizarDietaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LabelBotonPreVisualizarDietaMouseExited(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LabelBotonPreVisualizarDietaMouseClicked(evt);
            }
        });
        getContentPane().add(LabelBotonPreVisualizarDieta, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 100, 40, 30));

        LabelAvisoPrevisualizarPlanDieta.setText("Ver Plan Dieta");
        getContentPane().add(LabelAvisoPrevisualizarPlanDieta, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 80, -1, -1));

        Fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/FondoDieta.png"))); // NOI18N
        Fondo.setPreferredSize(new java.awt.Dimension(750, 565));
        getContentPane().add(Fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 750, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LabelBotonModificarDietaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelBotonModificarDietaMouseEntered
        LabelAvisoModificar.setVisible(true);
    }//GEN-LAST:event_LabelBotonModificarDietaMouseEntered

    private void LabelBotonModificarDietaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelBotonModificarDietaMouseExited
        LabelAvisoModificar.setVisible(false);
    }//GEN-LAST:event_LabelBotonModificarDietaMouseExited

    private void LabelCrearDietaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelCrearDietaMouseEntered
        LabelAvisoCrearDieta.setVisible(true);
    }//GEN-LAST:event_LabelCrearDietaMouseEntered

    private void LabelCrearDietaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelCrearDietaMouseExited
        LabelAvisoCrearDieta.setVisible(false);
    }//GEN-LAST:event_LabelCrearDietaMouseExited

    private void LabelBotonCrearDietaComidaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelBotonCrearDietaComidaMouseEntered
        LabelAvisoEmpezar.setVisible(true);
    }//GEN-LAST:event_LabelBotonCrearDietaComidaMouseEntered

    private void LabelBotonCrearDietaComidaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelBotonCrearDietaComidaMouseExited
        LabelAvisoEmpezar.setVisible(false);
    }//GEN-LAST:event_LabelBotonCrearDietaComidaMouseExited

    private void CalendarioFechaInicialPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_CalendarioFechaInicialPropertyChange
        if (evt.getOldValue() != null) {
//           SimpleDateFormat fecha=new SimpleDateFormat("dd/MM/yyyy");
//           TextoFechaFinalAutomatica.setText(fecha.format(CalendarioFechaInicial.getCalendar().getTime()));
            //String dia=Integer.toString(CalendarioFechaInicial.getCalendar().getTime())
        }
    }//GEN-LAST:event_CalendarioFechaInicialPropertyChange

    private void LabelCrearDietaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelCrearDietaMouseClicked
        if (modificar = true) {
            crear = false;

        } else {
            limpiarComboDietas(ComboListaDietas);
        }
        crear = true;
        modificar = false;
        String pasSelec = ComboPacientes.getSelectedItem().toString();
        if (ComboPacientes.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un paciente para continuar");
        } else {
            TextoPesoFinal.setEditable(true);
            TextoPesoInicial.setEditable(true);
            CalendarioFechaInicial.setEnabled(true);
            TextoNomDieta.setEditable(true);
            ComboListarCalorias.setVisible(true);
        }

    }//GEN-LAST:event_LabelCrearDietaMouseClicked

    private void TextoNomDietaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TextoNomDietaMouseClicked
        if (crear == true) {
//        if (TextoNomDieta.getText().equals("Ingrese un nombre de dieta..")) {
            TextoNomDieta.setText("");
            TextoNomDieta.setForeground(Color.BLACK);
        }
//       }
    }//GEN-LAST:event_TextoNomDietaMouseClicked

    private void LabelBotonCrearDietaComidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelBotonCrearDietaComidaMouseClicked
        if (ComboPacientes.getSelectedIndex() == 0) {

            JOptionPane.showMessageDialog(null, "Seleccione un paciente para continuar");
        } else if (crear == true) {
            try {
                String nom = TextoNomDieta.getText();
                double pesoInicial = Double.parseDouble(TextoPesoInicial.getText());
                double pesoFinal = Double.parseDouble(TextoPesoFinal.getText());
                int CaloriasSumadas = Integer.parseInt(TextoCaloriasSumadas.getText());
                int ObjetivoCaloriasEditable = Integer.parseInt(TextoObjetivoCaloriasEditable.getText());
                LocalDate fechaInicial;
                fechaInicial = CalendarioFechaInicial.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                String fecha = TextoFechaFinalAutomatica.getText();
                LocalDate fechafinalllll = LocalDate.parse(fecha, DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                System.out.println(fechafinalllll);
                if (ComboPacientes.getSelectedIndex() != 0 && TextoNomDieta != null && TextoPesoInicial != null && TextoPesoFinal != null && CalendarioFechaInicial != null && CaloriasSumadas < ObjetivoCaloriasEditable && modelo.getRowCount() > 0) {

                    TextoPesoInicial.setEditable(false);
                    TextoPesoFinal.setEditable(false);
                    TextoNomDieta.setEditable(false);
                    CalendarioFechaInicial.getDateEditor().setEnabled(false);
                    CalendarioFechaInicial.setSelectableDateRange(CalendarioFechaInicial.getDate(), CalendarioFechaInicial.getDate());

                    Paciente pas = new Paciente();
                    String numeroID = (ComboPacientes.getSelectedItem().toString());
                    int cadena = numeroID.length();
                    String numiD = "";
                    for (int i = 0; i < cadena - 1; i++) {
                        if (numeroID.substring(i, i + 1).equals("-")) {
                            i = cadena;
                        } else {
                            numiD = numiD + numeroID.substring(i, i + 1);
                        }
                    }

                    int numDni = Integer.parseInt(numiD);

                    PacienteData PD = new PacienteData();
                    pas.setIdPaciente(PD.buscarXdni(numDni).getIdPaciente());
                    Dieta die = new Dieta(nom, pas, fechaInicial, pesoInicial, pesoFinal, fechafinalllll);
                    DietaData DD = new DietaData();
                    DD.agregarDieta(die);
                    ArrayList<Comida> comidas = new ArrayList<>();
                    int filaselec = modelo.getRowCount();
                    for (int i = filaselec - 1; i > -1; i--) {
                        Comida comi = new Comida();
                        comi.setIdComida(Integer.parseInt(modelo.getValueAt(i, 0).toString()));
                        comidas.add(comi);
                    }
                    DietaComidaData DCD = new DietaComidaData();
                    DCD.agregarDietaComida(die, comidas);
                    limpiarTodo();
                } else {
                    JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios");
                }
            } catch (NumberFormatException x) {
                JOptionPane.showMessageDialog(null, "Revise los datos antes de continuar");
            }

        } else if (modificar == true) {
            Dieta dieta = new Dieta();
            DietaData DD = new DietaData();
            DietaComidaData DCD = new DietaComidaData();
            String idDieta = (ComboListaDietas.getSelectedItem().toString());
            int largoIdDieta = idDieta.length();
            String iDDie = "";
            for (int i = 0; i < largoIdDieta - 1; i++) {
                if (idDieta.substring(i, i + 1).equals("-")) {
                    i = largoIdDieta;
                } else {
                    iDDie = iDDie + idDieta.substring(i, i + 1);
                }

            }
            Paciente pas = new Paciente();
            String numeroID = (ComboPacientes.getSelectedItem().toString());
            int cadena = numeroID.length();
            String numiD = "";
            for (int i = 0; i < cadena - 1; i++) {
                if (numeroID.substring(i, i + 1).equals("-")) {
                    i = cadena;
                } else {
                    numiD = numiD + numeroID.substring(i, i + 1);
                }
            }

            int numDni = Integer.parseInt(numiD);
            pas.setDni(numDni);
            int numIdDie = Integer.parseInt(iDDie);
            double pesoInicial = Double.parseDouble(TextoPesoInicial.getText());
            double pesoFinal = Double.parseDouble(TextoPesoFinal.getText());
            LocalDate fechaInicial;
            fechaInicial = CalendarioFechaInicial.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            String fecha = TextoFechaFinalAutomatica.getText();
            LocalDate fechafinalllll = LocalDate.parse(fecha, DateTimeFormatter.ofPattern("dd/MM/yyyy"));

            dieta.setIdDieta(numIdDie);
            dieta.setNombre(TextoNomDieta.getText());
            dieta.setPaciente(pas);
            dieta.setPesoInicial(pesoInicial);
            dieta.setPesoFinal(pesoFinal);
            dieta.setFechaInicial(fechaInicial);
            dieta.setFechaFinal(fechafinalllll);
            int filas = modelo.getRowCount();
            int id = 0;
            for (int i = 0; i < filas - 1; i++) {
                Comida comi = new Comida();
                comi.setIdComida(id = Integer.parseInt(modelo.getValueAt(i, 0).toString()));
                DCD.modificarDietaComida(dieta, comi);

            }
            ArrayList<Comida> comiArr = new ArrayList<>();
            for (int i = 0; i < filas - 1; i++) {
                Comida comidaa = new Comida();
                comidaa.setIdComida(id = Integer.parseInt(modelo.getValueAt(i, 0).toString()));
                comiArr.add(comidaa);
            }
            DCD.agregarDietaComida(dieta, comiArr);

            JOptionPane.showMessageDialog(null, "Se han guardado los cambios.");
            limpiarTodo();
        }


    }//GEN-LAST:event_LabelBotonCrearDietaComidaMouseClicked

    private void CalendarioFechaInicialAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_CalendarioFechaInicialAncestorAdded

    }//GEN-LAST:event_CalendarioFechaInicialAncestorAdded

    private void CalendarioFechaInicialMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CalendarioFechaInicialMouseClicked

    }//GEN-LAST:event_CalendarioFechaInicialMouseClicked

    private void LabelBotonPreVisualizarDietaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelBotonPreVisualizarDietaMouseEntered
        LabelAvisoPrevisualizarPlanDieta.setVisible(true);
    }//GEN-LAST:event_LabelBotonPreVisualizarDietaMouseEntered

    private void LabelBotonPreVisualizarDietaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelBotonPreVisualizarDietaMouseExited
        LabelAvisoPrevisualizarPlanDieta.setVisible(false);
    }//GEN-LAST:event_LabelBotonPreVisualizarDietaMouseExited

    private void LabelBotonPreVisualizarDietaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelBotonPreVisualizarDietaMouseClicked
        ver = true;
        if (crear == true) {
            if (TextoPesoFinal.getText() != null && TextoPesoInicial != null && CalendarioFechaInicial.getDate() != null) {
                PanelFechaFinal.setVisible(true);
                PanelCantCalorias.setVisible(true);
                ComboListaDietas.addItem(TextoNomDieta.getText());
                try {
                    double pesoInicial = Double.parseDouble(TextoPesoInicial.getText());
                    double pesoFinal = Double.parseDouble(TextoPesoFinal.getText());
                    double dif;
                    Boolean subir;
                    if (pesoInicial > pesoFinal) {
                        dif = pesoInicial - pesoFinal;
                        subir = false;
                    } else {
                        dif = pesoFinal - pesoInicial;
                        subir = true;
                    }
                    LocalDate fechaInicial;
                    LocalDate fechafinalllll = null;
                    fechaInicial = CalendarioFechaInicial.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

                    if (dif > 0 && dif <= 5) {
                        if (subir == false) {
                            TextoObjetivoCaloriasEditable.setText("14000");
                        } else {
                            TextoObjetivoCaloriasEditable.setText("22400");
                        }
                        fechafinalllll = fechaInicial.plusMonths(2);
                        String fechaFFFinal = fechafinalllll.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                        TextoFechaFinalAutomatica.setText(fechaFFFinal);
                    } else if (dif > 5 && dif <= 10) {
                        if (subir == false) {
                            TextoObjetivoCaloriasEditable.setText("17500");
                        } else {
                            TextoObjetivoCaloriasEditable.setText("21700");
                        }
                        fechafinalllll = fechaInicial.plusMonths(4);
                        String fechaFFFinal = fechafinalllll.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                        TextoFechaFinalAutomatica.setText(fechaFFFinal);
                    } else if (dif > 10 && dif <= 15) {
                        if (subir == false) {
                            TextoObjetivoCaloriasEditable.setText("16800");
                        } else {
                            TextoObjetivoCaloriasEditable.setText("21000");
                        }
                        fechafinalllll = fechaInicial.plusMonths(6);
                        String fechaFFFinal = fechafinalllll.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                        TextoFechaFinalAutomatica.setText(fechaFFFinal);
                    } else if (dif > 15) {
                        if (subir == false) {
                            TextoObjetivoCaloriasEditable.setText("17500");
                        } else {
                            TextoObjetivoCaloriasEditable.setText("20300");
                        }
                        fechafinalllll = fechaInicial.plusYears(1);
                        String fechaFFFinal = fechafinalllll.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                        TextoFechaFinalAutomatica.setText(fechaFFFinal);
                    }
                    TextoCaloriasSumadas.setText("0");
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Ingrese un valor numerico" + e);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Faltan datos");
            }
        } else if (modificar == true) {

        }

    }//GEN-LAST:event_LabelBotonPreVisualizarDietaMouseClicked

    private void ComboPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboPacientesActionPerformed

        limpiarComboDietas(ComboListaDietas);
        limpiarTodo();
        if (ComboPacientes.getSelectedIndex() != 0) {
            Paciente paci = new Paciente();
            String numeroID = (ComboPacientes.getSelectedItem().toString());
            int cadena = numeroID.length();
            String numiD = "";
            for (int i = 0; i < cadena - 1; i++) {
                if (numeroID.substring(i, i + 1).equals("-")) {
                    i = cadena;
                } else {
                    numiD = numiD + numeroID.substring(i, i + 1);
                }
            }
            int numDni = Integer.parseInt(numiD);
            PacienteData paciData = new PacienteData();
            paci = paciData.buscarXdni(numDni);
            CargarComboBoxListarDietas(paci);

        }
    }//GEN-LAST:event_ComboPacientesActionPerformed

    private void ComboListarCaloriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboListarCaloriasActionPerformed

        limpiarTabla(modelo2);

        if (ComboListarCalorias.getSelectedIndex() != 0) {
            int caloria1 = 0;
            int caloria2 = 0;
            int r = 0;
            String cal = ComboListarCalorias.getSelectedItem().toString();
            int largo = cal.length();
            String calMas = "";
            for (int i = 0; i < largo - 1; i++) {
                if (cal.substring(i, i + 1).equals("-")) {
                    i = largo;
                } else {
                    calMas = calMas + cal.substring(i, i + 1);
                }
            }
            caloria1 = Integer.parseInt(calMas);
            calMas = "";
            for (int i = 0; i < largo - 1; i++) {
                if (cal.substring(i, i + 1).equals("-")) {
                    r = i + 2;
                } else if (cal.substring(i, i + 1).equals(" ")) {
                    i = largo;
                } else if (r == i + 1) {
                    calMas = calMas + cal.substring(i, i + 1);
                    r = r + 1;
                }
            }
            caloria2 = Integer.parseInt(calMas);
            ComidaData comiData = new ComidaData();
            ArrayList<Comida> comida = new ArrayList<>();
            comida = comiData.listarComidasPorCalorias(caloria1, caloria2);

            cargarTablaComidasParaAgregar(comida);

        }
    }//GEN-LAST:event_ComboListarCaloriasActionPerformed

    private void TablaComidasParaAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaComidasParaAgregarMouseClicked
        if (ver == true) {
            int id = Integer.parseInt(modelo2.getValueAt(TablaComidasParaAgregar.getSelectedRow(), 0).toString());
            Comida comida = new Comida();
            ComidaData cmData = new ComidaData();
            comida = cmData.buscarComida(id);
            cargarTablaComidasAgregadas(comida);

            int calo = Integer.parseInt(modelo2.getValueAt(TablaComidasParaAgregar.getSelectedRow(), 2).toString());
            int calosum = Integer.parseInt(TextoCaloriasSumadas.getText());
            int resultado = calosum + calo;
            TextoCaloriasSumadas.setText(String.valueOf(resultado));
        } else {
            JOptionPane.showMessageDialog(null, "Debe hacer click en ver para continuar");
        }
    }//GEN-LAST:event_TablaComidasParaAgregarMouseClicked

    private void LabelBotonModificarDietaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LabelBotonModificarDietaMouseClicked
        limpiarTabla(modelo);
        crear = false;
        modificar = true;
        ver = true;
        if (ComboPacientes.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un paciente para continuar");
        } else {
            ComboListarCalorias.setVisible(true);
            String dniS = ComboPacientes.getSelectedItem().toString();
            int largo = dniS.length();
            String numSum = "";
            for (int i = 0; i < largo - 1; i++) {
                if (dniS.substring(i, i + 1).equals("-")) {
                    i = largo;
                } else {
                    numSum = numSum + dniS.substring(i, i + 1);
                }
            }
            int dni = Integer.parseInt(numSum);
            Paciente paci = new Paciente();
            PacienteData paciData = new PacienteData();
            paci = paciData.buscarXdni(dni);
            int numItem = ComboListaDietas.getItemCount();
            if (numItem > 0) {
                String idS = ComboListaDietas.getSelectedItem().toString();
                int largoID = idS.length();
                String idSum = "";
                for (int i = 0; i < largoID - 1; i++) {
                    if (idS.substring(i, i + 1).equals("-")) {
                        i = largoID;
                    } else {
                        idSum = idSum + idS.substring(i, i + 1);
                    }
                }
                int iD = Integer.parseInt(idSum);
                //System.out.println(iD);
                DietaData dieData = new DietaData();
                Dieta dieta = new Dieta();
                dieta = dieData.buscarDieta(iD, paci.getIdPaciente());
                TextoNomDieta.setText(dieta.getNombre());
                TextoPesoInicial.setText(String.valueOf(dieta.getPesoInicial()));
                TextoPesoFinal.setText(String.valueOf(dieta.getPesoFinal()));
                CalendarioFechaInicial.setDate(Date.from(dieta.getFechaInicial().atStartOfDay().atZone(ZoneId.systemDefault()).toInstant()));
                LocalDate dato = dieta.getFechaFinal();
                String fechaFinallll = dato.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));
                TextoFechaFinalAutomatica.setText(fechaFinallll);
                PanelFechaFinal.setVisible(true);
                PanelCantCalorias.setVisible(true);

                try {
                    double pesoInicial = Double.parseDouble(TextoPesoInicial.getText());
                    double pesoFinal = Double.parseDouble(TextoPesoFinal.getText());
                    double dif;
                    Boolean subir;
                    if (pesoInicial > pesoFinal) {
                        dif = pesoInicial - pesoFinal;
                        subir = false;
                    } else {
                        dif = pesoFinal - pesoInicial;
                        subir = true;
                    }
                    if (dif > 0 && dif <= 5) {
                        if (subir == false) {
                            TextoObjetivoCaloriasEditable.setText("14000");
                        } else {
                            TextoObjetivoCaloriasEditable.setText("22400");
                        }
                    } else if (dif > 5 && dif <= 10) {
                        if (subir == false) {
                            TextoObjetivoCaloriasEditable.setText("17500");
                        } else {
                            TextoObjetivoCaloriasEditable.setText("21700");
                        }
                    } else if (dif > 10 && dif <= 15) {
                        if (subir == false) {
                            TextoObjetivoCaloriasEditable.setText("16800");
                        } else {
                            TextoObjetivoCaloriasEditable.setText("21000");
                        }
                    } else if (dif > 15) {
                        if (subir == false) {
                            TextoObjetivoCaloriasEditable.setText("17500");
                        } else {
                            TextoObjetivoCaloriasEditable.setText("20300");
                        }
                    }
                    DietaComidaData DCD = new DietaComidaData();
                    ArrayList<Comida> comi = new ArrayList<>();
                    comi = DCD.ListarDietaComidas(dieta.getIdDieta());
                    CargarTablaComiAgregModificar(comi);

                    int filas = modelo.getRowCount();
                    int calorias = 0;
                    int suma = 0;
                    for (int i = 0; i < filas ; i++) {
                        calorias = Integer.parseInt(modelo.getValueAt(i, 3).toString());
                        suma = suma + calorias;
                    }

                    //int caloSum=Integer.parseInt(TextoCaloriasSumadas.getText());
                    //int resul=suma;
                    TextoCaloriasSumadas.setText(String.valueOf(suma));

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Ingrese un valor numerico" + e);
                }
            }
            TextoPesoFinal.setEditable(false);
            TextoPesoInicial.setEditable(false);
            CalendarioFechaInicial.setEnabled(false);
            TextoNomDieta.setEditable(false);

        }

    }//GEN-LAST:event_LabelBotonModificarDietaMouseClicked

    private void TablaComidasAgregadasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaComidasAgregadasMouseClicked
        int caloria = Integer.parseInt(TextoCaloriasSumadas.getText().toString());
        int caloMenos = Integer.parseInt(modelo.getValueAt(TablaComidasAgregadas.getSelectedRow(), 3).toString());
        int resultado = caloria - caloMenos;
        TextoCaloriasSumadas.setText(String.valueOf(resultado));
        modelo.removeRow(TablaComidasAgregadas.getSelectedRow());
    }//GEN-LAST:event_TablaComidasAgregadasMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser CalendarioFechaInicial;
    private javax.swing.JComboBox<String> ComboListaDietas;
    private javax.swing.JComboBox<String> ComboListarCalorias;
    private javax.swing.JComboBox<String> ComboPacientes;
    private javax.swing.JLabel Fondo;
    private javax.swing.JLabel LabelAvisoCrearDieta;
    private javax.swing.JLabel LabelAvisoEmpezar;
    private javax.swing.JLabel LabelAvisoModificar;
    private javax.swing.JLabel LabelAvisoPrevisualizarPlanDieta;
    private javax.swing.JLabel LabelBotonCrearDietaComida;
    private javax.swing.JLabel LabelBotonModificarDieta;
    private javax.swing.JLabel LabelBotonPreVisualizarDieta;
    private javax.swing.JLabel LabelCantCalorias;
    private javax.swing.JLabel LabelCrearDieta;
    private javax.swing.JLabel LabelFechaFinal;
    private javax.swing.JLabel LabelFechaInicial;
    private javax.swing.JLabel LabelIngPesoFinal;
    private javax.swing.JLabel LabelIngPesoInicial;
    private javax.swing.JLabel LabelListarDietas;
    private javax.swing.JLabel LabelObjKcal;
    private javax.swing.JLabel LabelSeleccionCal;
    private javax.swing.JPanel PanelCantCalorias;
    private javax.swing.JPanel PanelFechaFinal;
    private javax.swing.JPanel PanelFechaInicial;
    private javax.swing.JPanel PanelIngPesoFinal;
    private javax.swing.JPanel PanelListarDietas;
    private javax.swing.JPanel PanelPesoInicialLabel;
    private javax.swing.JPanel PanelSelecCalorias;
    private javax.swing.JTable TablaComidasAgregadas;
    private javax.swing.JTable TablaComidasParaAgregar;
    private javax.swing.JTextField TextoCaloriasSumadas;
    private javax.swing.JTextField TextoFechaFinalAutomatica;
    private javax.swing.JTextField TextoNomDieta;
    private javax.swing.JTextField TextoObjetivoCaloriasEditable;
    private javax.swing.JTextField TextoPesoFinal;
    private javax.swing.JTextField TextoPesoInicial;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    public void QuitarLaBarraTitulo() {
        Barra = ((javax.swing.plaf.basic.BasicInternalFrameUI) getUI()).getNorthPane();
        DimensionBarra = Barra.getPreferredSize();
        Barra.setSize(0, 0);
        Barra.setPreferredSize(new Dimension(0, 0));
        repaint();
    }

    private void CargarCabeceraComiAgregadas() {
        //Por medio del objeto DefaultTableModel "modelo" se cargan las cabeceras de la tabla por medio del
        //metodo addColumn() que luego, se cargan a la tabla por medio del metodo setModel().
        modelo.addColumn("ID");
        modelo.addColumn("NOMBRE");
        modelo.addColumn("DETALLE");
        modelo.addColumn("CALORIAS");
        TablaComidasAgregadas.setModel(modelo);

    }

    private void CargarCabeceraComidas() {
        //Por medio del objeto DefaultTableModel "modelo" se cargan las cabeceras de la tabla por medio del
        //metodo addColumn() que luego, se cargan a la tabla por medio del metodo setModel().
        modelo2.addColumn("ID");
        modelo2.addColumn("NOMBRE");
        modelo2.addColumn("CALORIAS");
        modelo2.addColumn("DETALLE");
        TablaComidasParaAgregar.setModel(modelo2);
    }

    public void CargarComboBox() {
        ComboListarCalorias.addItem("Comidas");
        ComboListarCalorias.addItem("0-250 Kcal");
        ComboListarCalorias.addItem("251-500 Kcal");
        ComboListarCalorias.addItem("501-750 Kcal");
        ComboListarCalorias.addItem("751-1000 Kcal");
        ComboListarCalorias.addItem("1001-3500 Kcal");

    }

    public void CargarComboPacientes() {
        ComboPacientes.addItem("Seleccionar Paciente");
        PacienteData pd = new PacienteData();
        ArrayList<Paciente> pacientes = new ArrayList<>(pd.listarPaciente());
        
        for (Paciente paciente : pacientes) {
            String nom = paciente.getNombre();
            int dni = paciente.getDni();
            ComboPacientes.addItem(dni + "-" + nom);
        }
    }

    public void CargarComboBoxListarDietas(Paciente x) {

        DietaData dd = new DietaData();
        ArrayList<Dieta> dieta = new ArrayList<>();
        dieta = dd.listarDietas(x);
        for (Dieta dieta1 : dieta) {

            ComboListaDietas.addItem(dieta1.getIdDieta() + "-" + dieta1.getNombre());
        }

    }

    public void cargarTablaComidasParaAgregar(ArrayList<Comida> list) {
//El metodo recibe un ArrayList de Comida "list" que luego se recorre con un forech, el cual, carga cada 
//uno de los elementos en ese ArrayList en la tabla por medio de un instanciacion de "modelo2", para despues
//cargar la tabla con esos elementos.
        for (Comida elem : list) {
            modelo2.addRow(new Object[]{elem.getIdComida(), elem.getNombre(), elem.getCantCalorias(), elem.getDetalle()});
        }

    }

    public void cargarTablaComidasAgregadas(Comida list) {
//El metodo recibe un ArrayList de Comida "list" que luego se recorre con un forech, el cual, carga cada 
//uno de los elementos en ese ArrayList en la tabla por medio de un instanciacion de "modelo2", para despues
//cargar la tabla con esos elementos.
        int filas = modelo.getRowCount();
        modelo.insertRow(filas, new Object[]{list.getIdComida(), list.getNombre(), list.getDetalle(), list.getCantCalorias()});
//        for (Comida elem : list) {
//            modelo2.addRow(new Object[]{elem.getNombre(), elem.getCantCalorias()});
//        }

    }

    public void limpiarTodo() {
        int cant = ComboListaDietas.getItemCount();

        for (int i = cant - 1; i > -1; i--) {
            ComboListaDietas.removeItemAt(i);
        }
        limpiarTabla(modelo);
        limpiarTabla(modelo2);
        TextoNomDieta.setText("");
        TextoObjetivoCaloriasEditable.setText("");
        TextoPesoFinal.setText("");
        TextoPesoInicial.setText("");
        TextoCaloriasSumadas.setText("0");
        limpiarCombo(ComboListarCalorias);
        crear = false;
        modificar = false;
        ver = false;
        CalendarioFechaInicial.setEnabled(false);
        CalendarioFechaInicial.setDate(null);
        PanelFechaFinal.setVisible(false);
        PanelCantCalorias.setVisible(false);
        TextoFechaFinalAutomatica.setText("");
        crear = false;
        ver = false;
        TextoNomDieta.setEditable(false);
        TextoPesoFinal.setEditable(false);
        TextoPesoInicial.setEditable(false);
    }

    public void limpiarTabla(DefaultTableModel x) {
        int filas = x.getRowCount();
        for (int i = filas - 1; i > -1; i--) {
            x.removeRow(i);
        }
    }

    public void CargarTablaComiAgregModificar(ArrayList<Comida> comida) {

        for (Comida comida1 : comida) {
            modelo.addRow(new Object[]{comida1.getIdComida(), comida1.getNombre(), comida1.getDetalle(), comida1.getCantCalorias()});

        }
    }

    private void limpiarCombo(JComboBox x) {
        x.setSelectedIndex(0);

    }

    private void limpiarComboDietas(JComboBox x) {
        int cant = x.getItemCount();
        for (int i = cant - 1; i > -1; i--) {
            x.removeItemAt(i);
        }
    }

    public void UbicarCombo() {
        ComboPacientes.setSelectedIndex(0);
        CargarComboPacientes();
    }
}
